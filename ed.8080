;GNU ED CLONE FOR NORTHSTAR DISK OPERATING SYSTEM
;REFERENCES FILE 'NSDOS-PROC.ASM' FOR MANY OS CALLS AND CONSTANTS
;
;SAGE I HENDRICKS
;2023 NOV 13


;CONSTANTS
NULL	EQU	000H	;NULL BYTE
NULLPTR	EQU	00000H	;NULL WORD

CR	EQU	00AH	;CARTIDGE-RETURN
LF	EQU	00DH	;LINE-FEED
DEL	EQU	008H	;DELETE/BACKSPACE
RETURN	SET	LF	;RETURN/ENTER


;CODE PORTION
	ORG	TPA
MAIN:	CALL	PROMPT		;DEFAULT PROMPT, STORE INPUT IN COMBUFF
	
	LXI	D,COMBUFF	;LOAD COMBUFF ADDR
	CALL	PRINT		;ECHO INPUTTED TEXT
	
	;FALL THROUGH	
EXIT:	CALL	DOS		;RETURN CONTROL TO DOS/EXIT
	;FALL THROUGH
	;FATAL ERROR IF REACHED, CONTINUOUS HALT TO PROTECT THE SYSTEM
HALT:	HLT			;HALT THE SYSTEM, IN THE CASE OF AN ERROR
	JMP	HALT		;CONTINUOUSLY

PUTCH:	;B=CHAR
	PUSH	D
	MVI	A,STDOUT	;SET OUTPUT DEVICE AS STDOUT
	CALL	COUT		;OUTPUT CHAR (B) TO STDOUT
	POP	D
	RET

GETCH:	;RETURN=ACC
	PUSH	D
	MVI	A,STDIN		;SET INPUT DEVICE AS STDIN
	CALL	CIN		;WAIT FOR INPUT, PLACE INPUT IN ACC REG
	POP	D
	RET

CRLF:
	MVI	A,CR		;LOAD CR CHARACTER
	CALL	PUTCH		;PRINT TO STDOUT
	MVI	A,LF		;LOAD LF CHARACTER
	CALL	PUTCH		;PRINT TO STDOUT
	RET

PRINT:	;DE=NULL TERMINATED STRING
	LDAX	D		;GET CURRENT CHAR
	CPI	NULL		;CHECK IF CHARACTER IS NULL
	RZ			;IF IT IS, WE ARE DONE, RETURN
	MOV	B,A		;OTHERWISE, PREPARE THE CHAR FOR PUTCH
	CALL	PUTCH		;PRINT CHARACTER TO STDOUT
	INX	D		;MOVE TO THE NEXT CHARACTER
	JMP	PRINT		;REPEAT UNTIL A NULL IS FOUND


GETSTR:	;DE=STRING ADDR, C=MAXLEN, RETURN=CHAR COUNT
	DCR	C		;RESERVE SPACE FOR NULL TERMINATOR

	MVI	A,0		;VALUE OF 000H
	STA	CINDEX		;STORE VALUE AT CINDEX
	;FALL THROUGH
GSLOOP:	CALL	GETCH		;GET CHARACTER
	STA	CINPUT		;STORE CHARACTER IN CINPUT

	LDA	CINPUT		;LOAD CHARACTER FROM CINPUT
	CPI	DEL		;CHECK IF CHARACTER IS BACKSPACE
	JZ	GSDEL		;IF IT IS, REMOVE CHARACTER
	
	LDA	CINPUT		;GET CHARACTER FROM CINPUT
	CPI	RETURN		;CHECK IF CHARACTER IS RETURN/ENTER
	JZ	GSRET		;IF IT IS, STOP GETTING INPUT

	LDA	CINDEX		;GET INDEX FROM CINDEX
	CMP	C		;CHECK CINDEX AND MAXINDEX
	CNZ	GSADD		;IF WE AREN'T AT MAX INDEX, ADD CHARACTER	
	
	JMP	GSLOOP		;LOOP BACK UP AND GET NEXT CHARACTER
GSADD:	LDA	CINPUT		;GET CHARACTER FROM CINPUT
	STAX	D		;STORE THE CHARACTER IN THE STRING
	INX	D		;MOVE STRING ADDR TO NEXT CHAR

	LDA	CINPUT		;GET CHARACTER FROM CINPUT
	CALL	PUTCH		;PRINT THE CHARACTER TO STDOUT
	
	LXI	H,CINDEX	;LOAD INDEX ADDR
	MOV	A,M		;GET VALUE AT CINDEX
	INR	A		;INCREMENT INDEX
	MOV	M,A		;STORE NEW VALUE IN CINDEX

	RET
GSDEL:	LXI	H,CINDEX	;LOAD CINDEX ADDR
	MOV	A,M		;GET CINDEX VALUE
	CPI	0		;CHECK IF INDEX IS 0
	JZ	GSLOOP		;IF IT IS, DO NOTHING
	DCR	A		;OTHERWISE, DECREMENT CINDEX
	MOV	M,A		;STORE NEW VALUE BACK IN CINDEX

	DCX	D		;DECREMENT STRING ADDR
	
	LDAX	D		;GET REMOVED CHARACTER
	CALL	PUTCH		;PRINT IT TO STDOUT

	JMP	GSLOOP		;GET NEXT CHARACTER
GSRET:	MVI	A,NULL		;LOAD NULL CHARACTER
	STAX	D		;STORE THE CHARACTER IN STRING
	
	LDA	CINDEX		;GET VALUE AT CINDEX
	
	RET

PROMPT:	LXI	D,PROMPTSTR	;LOAD PROMPT STRING
	CALL	PRINT		;PRINT THE STRING
	
	LXI	D,COMBUFF	;LOAD COMBUFF ADDR FOR INPUT
	MVI	C,COMLEN	;LOAD MAX LENGTH
	CALL	GETSTR		;GET STRING INPUT IN COMBUFF
	
	CALL	CRLF		;MOVE TO NEXT LINE
	
	RET
	

;DATA PORTION
PROMPTSTR:	DB	'* ',NULL	

COMLEN		EQU	128	;LENGTH OF THE COMMAND BUFFER
COMBUFF:	DS	COMLEN	;COMMAND BUFFER

CINDEX:		DB	000H	;CHARACTER INDEX FOR GETCH
CINPUT:		DB	NULL	;INPUTTED CHARACTER

MEM:	EQU	$	;BASE OF TRAILING UNUSED MEMORY (MUST BE LAST)
MAXM:	EQU	00000H	;MAX MEM ADDRESS ALLOWED TO REFERENCE

	END
